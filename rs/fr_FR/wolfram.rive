> object wolfram_alpha python
    # i18n
    LANG = "fr"
    ERROR_MSG = "Je n'ai pas pu trouver de réponse. L'erreur est "
    ERROR_MSG_NONE = "Je n'ai pas pu trouver de réponse."
    ERROR_MSG_NOT_CONFIGURED = "Le package brain wolfram doit être configuré."
    ERROR_MSG_CONFIG = "Une erreur est survenue pendant la récupération de la configuration."

    # imports
    import traceback
    import goslate
    import tungsten
    import pprint

    # config
    # sample (and wrong) value : WOLFRAMALPHA_APPID = "GHJ4YD-KSDFUEHEJL"
    try:
        from domogik.common.queryconfig import QueryForBrain
        config = QueryForBrain()
        WOLFRAMALPHA_APPID = config.query("brain", "wolfram", 'api_key')
        if WOLFRAMALPHA_APPID == None:
            return ERROR_MSG_NOT_CONFIGURED
    except:
        return ERROR_MSG_CONFIG

    # translation for non "us" languages as wolfram works only in english
    def translate_query(text):
        #print("Translate query : {0}".format(text))
        if LANG == "us":
            return text

        # translation in "us"
        gs = goslate.Goslate()
        translated = gs.translate(text, "us", LANG)
        return translated

    def translate_response(text):
        #print("Translate response : {0}".format(text))
        if LANG == "us":
            return text

        # translation in LANG
        gs = goslate.Goslate()
        translated = gs.translate(text, LANG)
        return translated

    # request wolfram for an answer
    def ask_wolfram(text):
        try:
            response = u""
            #print("Call Wolfram for : {0}".format(text))
            client = tungsten.Tungsten(WOLFRAMALPHA_APPID)
            result = client.query(text)
            if result.success == False:
                #print(result.error)
                if result.error == None:
                    return "{0}".format(ERROR_MSG_NONE)
                else:
                    return "{0} : {1}".format(ERROR_MSG, result.error)

            # first, search if there is a id=Result
            # if so, we only take this one in account
            for pod in result.pods:
                if pod.id == "Result":
                    print(pod.format)
                    return u"{0}".format(process_response(pod.format['plaintext']))

            # if no result, process returned data
            for pod in result.pods:
                # skip id=Input
                if pod.id == "Input":
                    continue
                data = pod.format
                # skip data with no plain text
                if data['plaintext'] == [None]:
                    continue
                print(u"Title = {0}".format(pod.title))
                print(u"Text = {0}".format(data['plaintext']))

                pod_result = process_response(data['plaintext'])
                response = u"{0}\n{1}. {2}".format(response, pod.title, pod_result)
            return response
        except:
            print(u"Wolfram Error : {0}".format(traceback.format_exc()))
            return "{0} : {1}".format(ERROR_MSG, traceback.format_exc())

    def process_response(text):
        ### make a nice output
        # 1. we concatenate all the returned list elements
        # todo : a \n instead of the space ?
        tmp_pod_data = '\n'.join(text)

        # 2. we split by \n. 
        tmp_pod_data_lines = tmp_pod_data.split("\n")
        
        # 3. for each line we spit by | (for tables)
        pod_result = u""
        for a_line in tmp_pod_data_lines:
            a_line = a_line.replace("|", ":")
            pod_result = u"{0}{1}. ".format(pod_result, a_line)
        return pod_result
                     
    query = ' '.join(args)
    query_us = translate_query(query)
    response = ask_wolfram(query_us)
    response_lang = translate_response(response)
    return response_lang
< object


+ (trouve moi|dis moi|donne moi|donne moi des infos sur|donne moi des informations sur) *
- <call>wolfram_alpha <star2></call>
